/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PhishBlock {
  export type ReportStruct = {
    id: BigNumberish;
    reporter: AddressLike;
    reportType: string;
    target: string;
    ipfsHash: string;
    timestamp: BigNumberish;
    status: BigNumberish;
    votesFor: BigNumberish;
    votesAgainst: BigNumberish;
  };

  export type ReportStructOutput = [
    id: bigint,
    reporter: string,
    reportType: string,
    target: string,
    ipfsHash: string,
    timestamp: bigint,
    status: bigint,
    votesFor: bigint,
    votesAgainst: bigint
  ] & {
    id: bigint;
    reporter: string;
    reportType: string;
    target: string;
    ipfsHash: string;
    timestamp: bigint;
    status: bigint;
    votesFor: bigint;
    votesAgainst: bigint;
  };
}

export interface PhishBlockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VALIDATION_THRESHOLD"
      | "VOTING_PERIOD"
      | "addValidator"
      | "admin"
      | "getReport"
      | "getReportCountByStatus"
      | "getReportsByStatus"
      | "hasVoted"
      | "paused"
      | "removeValidator"
      | "reportCount"
      | "reports"
      | "setPaused"
      | "submitReport"
      | "validators"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PausedStateChanged"
      | "ReportSubmitted"
      | "ReportValidated"
      | "ValidatorAdded"
      | "ValidatorRemoved"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "VALIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getReport",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReportCountByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReportsByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reports",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "submitReport",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "VALIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReport", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReportCountByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace PausedStateChangedEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportSubmittedEvent {
  export type InputTuple = [
    reportId: BigNumberish,
    reporter: AddressLike,
    target: string
  ];
  export type OutputTuple = [
    reportId: bigint,
    reporter: string,
    target: string
  ];
  export interface OutputObject {
    reportId: bigint;
    reporter: string;
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReportValidatedEvent {
  export type InputTuple = [reportId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [reportId: bigint, status: bigint];
  export interface OutputObject {
    reportId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    reportId: BigNumberish,
    voter: AddressLike,
    support: boolean
  ];
  export type OutputTuple = [reportId: bigint, voter: string, support: boolean];
  export interface OutputObject {
    reportId: bigint;
    voter: string;
    support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PhishBlock extends BaseContract {
  connect(runner?: ContractRunner | null): PhishBlock;
  waitForDeployment(): Promise<this>;

  interface: PhishBlockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VALIDATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  addValidator: TypedContractMethod<
    [_validator: AddressLike],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getReport: TypedContractMethod<
    [_reportId: BigNumberish],
    [PhishBlock.ReportStructOutput],
    "view"
  >;

  getReportCountByStatus: TypedContractMethod<
    [_status: BigNumberish],
    [bigint],
    "view"
  >;

  getReportsByStatus: TypedContractMethod<
    [_status: BigNumberish],
    [PhishBlock.ReportStructOutput[]],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeValidator: TypedContractMethod<
    [_validator: AddressLike],
    [void],
    "nonpayable"
  >;

  reportCount: TypedContractMethod<[], [bigint], "view">;

  reports: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        reporter: string;
        reportType: string;
        target: string;
        ipfsHash: string;
        timestamp: bigint;
        status: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
      }
    ],
    "view"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  submitReport: TypedContractMethod<
    [_reportType: string, _target: string, _ipfsHash: string],
    [bigint],
    "nonpayable"
  >;

  validators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  vote: TypedContractMethod<
    [_reportId: BigNumberish, _support: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VALIDATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addValidator"
  ): TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getReport"
  ): TypedContractMethod<
    [_reportId: BigNumberish],
    [PhishBlock.ReportStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReportCountByStatus"
  ): TypedContractMethod<[_status: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReportsByStatus"
  ): TypedContractMethod<
    [_status: BigNumberish],
    [PhishBlock.ReportStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<[_validator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reportCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reports"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        reporter: string;
        reportType: string;
        target: string;
        ipfsHash: string;
        timestamp: bigint;
        status: bigint;
        votesFor: bigint;
        votesAgainst: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitReport"
  ): TypedContractMethod<
    [_reportType: string, _target: string, _ipfsHash: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_reportId: BigNumberish, _support: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PausedStateChanged"
  ): TypedContractEvent<
    PausedStateChangedEvent.InputTuple,
    PausedStateChangedEvent.OutputTuple,
    PausedStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReportSubmitted"
  ): TypedContractEvent<
    ReportSubmittedEvent.InputTuple,
    ReportSubmittedEvent.OutputTuple,
    ReportSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ReportValidated"
  ): TypedContractEvent<
    ReportValidatedEvent.InputTuple,
    ReportValidatedEvent.OutputTuple,
    ReportValidatedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "PausedStateChanged(bool)": TypedContractEvent<
      PausedStateChangedEvent.InputTuple,
      PausedStateChangedEvent.OutputTuple,
      PausedStateChangedEvent.OutputObject
    >;
    PausedStateChanged: TypedContractEvent<
      PausedStateChangedEvent.InputTuple,
      PausedStateChangedEvent.OutputTuple,
      PausedStateChangedEvent.OutputObject
    >;

    "ReportSubmitted(uint256,address,string)": TypedContractEvent<
      ReportSubmittedEvent.InputTuple,
      ReportSubmittedEvent.OutputTuple,
      ReportSubmittedEvent.OutputObject
    >;
    ReportSubmitted: TypedContractEvent<
      ReportSubmittedEvent.InputTuple,
      ReportSubmittedEvent.OutputTuple,
      ReportSubmittedEvent.OutputObject
    >;

    "ReportValidated(uint256,uint8)": TypedContractEvent<
      ReportValidatedEvent.InputTuple,
      ReportValidatedEvent.OutputTuple,
      ReportValidatedEvent.OutputObject
    >;
    ReportValidated: TypedContractEvent<
      ReportValidatedEvent.InputTuple,
      ReportValidatedEvent.OutputTuple,
      ReportValidatedEvent.OutputObject
    >;

    "ValidatorAdded(address)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorRemoved(address)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
